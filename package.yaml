name: advent-of-code
version: 1.0.0
synopsis: Advent of Code solver
dependencies:
  - base >= 4.9 && <5
  - parsec
  - comonad
  - containers >= 0.6.4.1 && <0.7.0
  - directory
  - mtl

executables:
  advent-of-code:
    main: Main.hs
    source-dirs:
      - src
      - app
    dependencies:
      - bytestring
      - optparse-generic >= 1.4.8 && <2
      - http-client
      - http-client-tls
      - http-types

tests:
  test:
    main: Main.hs
    source-dirs:
      - src
      - test
    dependencies:
      - hspec

# from https://medium.com/mercury-bank/enable-all-the-warnings-a0517bc081c3
ghc-options:
  - -Weverything
  - -Wno-missing-exported-signatures # missing-exported-signatures turns off the more strict -Wmissing-signatures. See https://ghc.haskell.org/trac/ghc/ticket/14794#ticket
  - -Wno-missing-export-lists # Requires explicit export lists for every module, a pain for large modules
  - -Wno-missing-import-lists # Requires explicit imports of _every_ function (e.g. '$'); too strict
  - -Wno-missed-specialisations # When GHC can't specialize a polymorphic function. No big deal and requires fixing underlying libraries to solve.
  - -Wno-all-missed-specialisations # See missed-specialisations
  - -Wno-unsafe # Don't use Safe Haskell warnings
  - -Wno-missing-local-signatures # Warning for polymorphic local bindings. Don't think this is an issue
  - -Wno-monomorphism-restriction # Don't warn if the monomorphism restriction is used
  - -Wno-missing-safe-haskell-mode # Cabal isn’t setting this currently (introduced in GHC 8.10)
  - -Wno-prepositive-qualified-module # Cabal’s generate Path_*.hs doesn’t do this (fixed in https://github.com/haskell/cabal/pull/7352)
  - -Wno-unused-packages # Some tooling gives this error
    # not supported
    # - -Wno-missing-kind-signatures # Warns literally every type

default-extensions:
  - AllowAmbiguousTypes
  - ApplicativeDo
  - BlockArguments
  - DataKinds
  - DeriveAnyClass
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveTraversable
  - DerivingVia
  - FlexibleContexts
  - FlexibleInstances
  - FunctionalDependencies
  - GADTs
  - GeneralizedNewtypeDeriving
  - ImportQualifiedPost
  - InstanceSigs
  - LambdaCase
  # This is a good idea but not supported in 8.10
  # - LexicalNegation
  - MonoLocalBinds
  - MultiWayIf
  - NamedFieldPuns
  - NoImplicitPrelude
  - NumericUnderscores
  - OverloadedStrings
  - PatternSynonyms
  - PolyKinds
  - RankNTypes
  - RecordWildCards
  - RecursiveDo
  - ScopedTypeVariables
  - StandaloneDeriving
  - StandaloneKindSignatures
  - TypeApplications
  - TypeFamilies
  - ViewPatterns
